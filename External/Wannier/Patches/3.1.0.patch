diff --git a/00_README_WRAPPER.md b/00_README_WRAPPER.md
new file mode 100644
index 00000000..02da51c8
--- /dev/null
+++ b/00_README_WRAPPER.md
@@ -0,0 +1,59 @@
+## Simple wrapper for wannier90
+
+Within the context of the Siesta project, a small patch for
+wannier90-3.1.0 has been created to enable a simpler interface between
+the codes. The main change is the wrapping of the ``wannier_prog``
+program to turn it into a subroutine that can be called directly from
+another program. That is the only entry point of the API, as
+implemented in the ``wannier90_m`` module.
+
+In addition, a simple CMake building system has been implemented to facilitate
+the automatic compilation of the wrapper.
+
+### Changes to the wannier90 code
+
+The ``wannier90_wrapper`` subroutine accepts as arguments:
+
+* The ``seedname`` or file prefix.
+* The MPI communicator to be used (only in the MPI version)
+* (Optional) nnkp_mode: a flag to request only the generation of a .nnkp file.
+* (Optional) dryrun_mode: a flag to perform a simple dry-run to check the input file.
+* (Optional) Arrays to hold the information about k-point neighbors
+* (Optional) Arrays to hold the information about the unitary matrices
+
+The last two are convenience arguments to enable client codes to extract the needed information
+directly, without having to read the .nnkp and .chk files, respectively.
+
+All other interaction with wannier90 is through files:
+
+* ``seedname.win`` (provided by client) is the input file
+* ``seedname.amn`` (provided by client) 
+* ``seedname.mmn`` (provided by client)
+* ``seedname.{eig_ext}`` (provided by client)
+* ``seedname.wout`` (generated by wannier90)
+*  ... plus other plotting and auxiliary files generated by wannier90.
+
+The standard command-line interaction with wannier90 has been bypassed.
+
+In MPI operation, no initialization is done by wannier90, and the communicator to be used is
+passed explicitly. Internally, the communicator is named ``mpi_comm_w90``. The ``mpif.h`` file
+is read once in the auxiliary module w90_mpi, which is used by relevant pieces of the code.
+
+Some minor changes have been needed to make sure that all variables are deallocated at the end
+of the wannier90 run, so that the wrapper can be called repeatedly without errors.
+
+### Compilation with CMake
+
+(Note that the standard makefile-based building system with **NOT** work for the wrapper.)
+
+Basic incantation (items in brackets are optional, needed for MPI operation and to help finding
+an appropriate Lapack library):
+
+```
+  cmake -S. -B _build [ -DWITH_MPI=ON ] [-DLAPACK_LIBRARY=   ] [ -DCMAKE_INSTALL_PREFIX=/path/to/inst ]
+  cmake --build _build
+  [ cmake --install _build ]
+```
+
+  
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000..fa6e30f7
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,145 @@
+
+cmake_minimum_required(VERSION 3.14)
+
+list(APPEND
+   CMAKE_MODULE_PATH
+   ${CMAKE_CURRENT_SOURCE_DIR}/config/cmake
+  )
+
+get_filename_component(srcdir "${CMAKE_CURRENT_SOURCE_DIR}" REALPATH)
+get_filename_component(bindir "${CMAKE_CURRENT_BINARY_DIR}" REALPATH)
+
+if("${srcdir}" STREQUAL "${bindir}")
+  message(FATAL_ERROR
+      "It is not allowed to configure and build this project from its source folder")
+endif()
+
+project(
+  "libwannier90"
+  LANGUAGES "Fortran"
+  VERSION "3.1.0"
+  DESCRIPTION "Wannier90 Library/Wrapper for use in Siesta"
+)
+
+# Follow GNU conventions for installing directories
+include(GNUInstallDirs)
+
+set(LIBRARY_OUTPUT_NAME "wannier90")
+
+# General configuration information
+add_subdirectory("config")
+
+find_package(CustomLapack)
+include(check_lapack)
+
+option(WITH_MPI "Whether libwannier90 should support MPI-parallelism" FALSE)
+
+if(WITH_MPI)
+  if (NOT TARGET MPI::MPI_Fortran)
+    find_package(MPI REQUIRED)
+  endif()
+endif()
+
+# Collect source of the project
+add_library( "${PROJECT_NAME}-lib"
+
+ src/wannier90_m.F90
+ src/wannier_prog.F90
+ src/constants.F90
+ src/io.F90
+ src/utility.F90
+ src/comms.F90
+ src/parameters.F90
+ src/ws_distance.F90
+ src/hamiltonian.F90
+ src/sitesym.F90
+ src/overlap.F90
+ src/kmesh.F90
+ src/disentangle.F90
+ src/wannierise.F90
+ src/plot.F90
+ src/transport.F90
+
+)
+
+set_target_properties(
+  "${PROJECT_NAME}-lib"
+  PROPERTIES
+  POSITION_INDEPENDENT_CODE TRUE
+  OUTPUT_NAME "${LIBRARY_OUTPUT_NAME}"
+  VERSION "${PROJECT_VERSION}"
+  SOVERSION "${PROJECT_VERSION_MAJOR}"
+  Fortran_MODULE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include"
+)
+
+if(WITH_MPI)
+  target_compile_definitions(
+  "${PROJECT_NAME}-lib"
+  PRIVATE MPI
+  )
+
+  target_link_libraries("${PROJECT_NAME}-lib" PUBLIC MPI::MPI_Fortran)
+
+endif()
+
+  target_link_libraries("${PROJECT_NAME}-lib" PUBLIC LAPACK::LAPACK)
+
+target_include_directories(
+  "${PROJECT_NAME}-lib"
+  PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
+  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${module-dir}>
+)
+
+# Add alias libwannier90::libwannier90 to use the functionality
+# without the need to install
+#
+### add_library("${PROJECT_NAME}::${PROJECT_NAME}" ALIAS "${PROJECT_NAME}-lib")
+
+
+# Export targets for other projects
+add_library("${PROJECT_NAME}" INTERFACE)
+target_link_libraries("${PROJECT_NAME}" INTERFACE "${PROJECT_NAME}-lib")
+
+install(
+  TARGETS
+  "${PROJECT_NAME}"
+  "${PROJECT_NAME}-lib"
+  EXPORT
+  "${PROJECT_NAME}-targets"
+  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+)
+install(
+  EXPORT
+  "${PROJECT_NAME}-targets"
+  NAMESPACE
+  "${PROJECT_NAME}::"
+  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+)
+install(
+  DIRECTORY
+  "${CMAKE_CURRENT_BINARY_DIR}/include/"
+  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${module-dir}"
+)
+# Package license files
+install(
+  FILES
+  "LICENSE"
+  DESTINATION "${CMAKE_INSTALL_DATADIR}/licenses/${PROJECT_NAME}"
+)
+
+# A proof-of-concept driver with hardwired settings and paths for now
+#
+add_executable(w90_driver w90_driver.F90)
+if(WITH_MPI)
+  target_compile_definitions(
+  w90_driver
+  PRIVATE MPI
+  )
+endif()
+target_link_libraries(w90_driver   "${PROJECT_NAME}-lib")
+
+enable_testing()
+add_subdirectory("examples")
diff --git a/config/CMakeLists.txt b/config/CMakeLists.txt
new file mode 100644
index 00000000..53a73e98
--- /dev/null
+++ b/config/CMakeLists.txt
@@ -0,0 +1,53 @@
+
+option(BUILD_SHARED_LIBS "Whether the libraries built should be shared" FALSE)
+
+
+set(
+  module-dir
+  "${PROJECT_NAME}/${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}"
+)
+set(module-dir "${module-dir}" PARENT_SCOPE)
+
+
+# Set build type as CMake does not provide defaults
+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+  set(
+    CMAKE_BUILD_TYPE "RelWithDebInfo"
+    CACHE STRING "Build type to be used."
+    FORCE
+  )
+  message(
+    STATUS
+    "Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified."
+  )
+endif()
+
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(
+  "${CMAKE_CURRENT_SOURCE_DIR}/template.cmake"
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+  INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+)
+write_basic_package_version_file(
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+  VERSION "${PROJECT_VERSION}"
+  COMPATIBILITY SameMinorVersion
+)
+install(
+  FILES
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+)
+
+configure_file(
+  "${CMAKE_CURRENT_SOURCE_DIR}/template.pc.in"
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
+  @ONLY
+)
+install(
+  FILES
+  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
+  DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig"
+)
diff --git a/config/cmake/CustomLibraryFinder.cmake b/config/cmake/CustomLibraryFinder.cmake
new file mode 100644
index 00000000..49f8f167
--- /dev/null
+++ b/config/cmake/CustomLibraryFinder.cmake
@@ -0,0 +1,34 @@
+#
+# This file was taken from the DFTB+ CMake hierarchy
+#
+# Finds customized libraries.
+#
+# The customized list of libraries can contain library names, file names or linker options.
+# Libraries are searched for by the find_library() function, file names are checked on existence and
+# linker options (names starting with "-") are added unchanged.
+#
+# libs [in]: List of libraries to find.
+# libdirs [in]: Directories to look up for the libraries.
+# find_quietly [in]: Whether the libraries should be found quietly.
+# libs_found [out]: Contains the list of the detected libraries with their full path. If any of
+#     the libraries/files could not be found, the corresponding entry is replaced by
+#     "_libpath-NOT_FOUND".
+#
+function(find_custom_libraries libs libdirs find_quietly libs_found)
+
+  set(_libs)
+  foreach(_lib IN LISTS libs)
+    if(_lib MATCHES "^[ ]*-.*"  OR EXISTS "${_lib}")
+      list(APPEND _libs ${_lib})
+    else()
+      find_library(_libpath ${_lib} HINTS ${libdirs})
+      list(APPEND _libs ${_libpath})
+      if(NOT _libpath AND NOT find_quietly)
+        message(WARNING "Could not find library '${_lib}' (path hints '${libdirs}'")
+      endif()
+      unset(_libpath CACHE)
+    endif()
+  endforeach()
+  set(${libs_found} "${_libs}" PARENT_SCOPE)
+
+endfunction()
diff --git a/config/cmake/FindCustomLapack.cmake b/config/cmake/FindCustomLapack.cmake
new file mode 100644
index 00000000..8c0aed2e
--- /dev/null
+++ b/config/cmake/FindCustomLapack.cmake
@@ -0,0 +1,142 @@
+# Distributed under the OSI-approved BSD 2-Clause License.
+#
+# Copyright (C) 2022  DFTB+ developers group
+#
+
+#[=======================================================================[.rst:
+FindCustomLapack
+----------------
+
+Finds the LAPACK library
+
+This is a wrapper around CMakes FindLAPACK module with the additional
+possibility to customize the library name manually. In latter case the module will
+check the existence of those libraries and stop if they are not found.
+
+Note: The module is named FindLapack (and not FindLAPACK) to avoid name
+collision with CMakes built-in FindLAPACK module.
+
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module provides the following imported target, if found:
+
+``LAPACK::LAPACK``
+  The LAPACK library
+
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This module will define the following variable:
+
+``LAPACK_FOUND``
+  True if the system has the LAPACK library
+
+
+Cache variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may be set to influence the library detection:
+
+``LAPACK_DETECTION``
+  Whether LAPACK libraries should be detected (default: True). If set to False,
+  the settings in ``LAPACK_LIBRARY`` will be used without any further checks.
+
+``LAPACK_LIBRARY``
+  Customized LAPACK library/libraries to use (instead of autodetected ones).  If
+  no LAPACK library is required (e.g. the linker automatically links it) set
+  ``LAPACK_LIBRARY="NONE"``. If not set or empty, the built-in LAPACK finder
+  (the findLAPACK module) will be invoked. Otherwise, the listed libraries
+  will be checked for existence (unless disabled in ``LAPACK_DETECTION``) and
+  the variable is overwritten to contain the libraries with their with full
+  path.
+
+``LAPACK_LIBRARY_DIR``
+  Directories which should be looked up in order to find the customized libraries.
+
+``LAPACK_LINKER_FLAG``
+  Flags to use when linking LAPACK
+
+Additionally, the cache variables of the built-in FindLAPACK modules may used to
+influence the LAPACK detection if the built-in module is invoked.
+
+#]=======================================================================]
+
+include(FindPackageHandleStandardArgs)
+include(CustomLibraryFinder)
+
+if(TARGET LAPACK::LAPACK)
+
+  set(CUSTOMLAPACK_FOUND True)
+  set(CustomLapack_FOUND True)
+  set(LAPACK_FOUND True)
+  set(Lapack_FOUND True)
+
+else()
+
+  option(LAPACK_DETECTION "Whether LAPACK library should be detected" TRUE)
+
+  if(LAPACK_DETECTION)
+    # LAPACK has either not been found yet or it was found by an older built-in findLAPACK module.
+    # which does not provide the imported target LAPACK::LAPACK
+
+    if("${LAPACK_LIBRARY}" STREQUAL "")
+
+      # No user customized LAPACK library, try built-in finder
+      if(NOT LAPACK_FOUND)
+        find_package(LAPACK)
+      endif()
+      set(LAPACK_LIBRARY "${LAPACK_LIBRARIES}" CACHE STRING "LAPACK library to link" FORCE)
+      set(LAPACK_LINKER_FLAG "${LAPACK_LINKER_FLAGS}" CACHE STRING
+        "Linker flags to use when linking LAPACK" FORCE)
+
+    elseif(NOT "${LAPACK_LIBRARY}" STREQUAL "NONE")
+
+      # LAPACK explicitely set by the user, search for those libraries
+      find_custom_libraries("${LAPACK_LIBRARY}" "${LAPACK_LIBRARY_DIR}"
+        "${CustomLapack_FIND_QUIETLY}" _libs)
+      set(LAPACK_LIBRARY "${_libs}" CACHE STRING "List of LAPACK libraries to link" FORCE)
+      unset(_libs)
+
+    endif()
+
+    set(LAPACK_DETECTION False CACHE BOOL "Whether LAPACK libraries should be detected" FORCE)
+
+  endif()
+
+  find_package_handle_standard_args(CustomLapack REQUIRED_VARS LAPACK_LIBRARY)
+
+  set(LAPACK_FOUND ${CUSTOMLAPACK_FOUND})
+  set(Lapack_FOUND ${CUSTOMLAPACK_FOUND})
+
+  if (LAPACK_FOUND AND NOT TARGET LAPACK::LAPACK)
+    message(STATUS "Lapack Found but no target LAPACK::LAPACK")
+    if(NOT "${LAPACK_LIBRARY}" STREQUAL "NONE")
+      add_library(LAPACK::LAPACK INTERFACE IMPORTED)
+      target_link_libraries(LAPACK::LAPACK INTERFACE "${LAPACK_LIBRARY}")
+      if(NOT "${LAPACK_LINKER_FLAG}" STREQUAL "")
+        target_link_options(LAPACK::LAPACK INTERFACE "${LAPACK_LINKER_FLAG}")
+      endif()
+      if(TARGET BLAS::BLAS)
+        message(STATUS "Adding dependency on BLAS::BLAS")
+        target_link_libraries(LAPACK::LAPACK INTERFACE BLAS::BLAS)
+      endif()
+    else()
+      message(STATUS "Lapack set to NONE. Use just BLAS::BLAS")
+      if(TARGET BLAS::BLAS)
+        message(STATUS "Lapack will be just interface")
+        add_library(LAPACK::LAPACK INTERFACE IMPORTED)
+	target_link_libraries(LAPACK::LAPACK INTERFACE BLAS::BLAS)
+      else()
+        message(STATUS "... but there is no target BLAS::BLAS !!")
+      endif()
+    endif()
+  endif()
+
+  mark_as_advanced(LAPACK_DETECTION LAPACK_LIBRARY LAPACK_LIBRARY_DIR LAPACK_LINKER_FLAG)
+
+endif()
+#
+
diff --git a/config/cmake/check_lapack.cmake b/config/cmake/check_lapack.cmake
new file mode 100644
index 00000000..7a6bbfdb
--- /dev/null
+++ b/config/cmake/check_lapack.cmake
@@ -0,0 +1,59 @@
+# Run sanity checks on the libraries.
+# In particular, check that the return convention is appropriate on MacOS
+# (See https://github.com/mcg1969/vecLibFort for more details)
+#
+
+include(CheckFortranSourceCompiles)
+include(CheckFortranSourceRuns)
+
+set(CMAKE_REQUIRED_QUIET OFF)
+message(STATUS
+        "Checking that Lapack library links...")
+	
+set(CMAKE_REQUIRED_LIBRARIES LAPACK::LAPACK)
+check_fortran_source_compiles(
+"
+external :: sgemm, dsysv
+call sgemm()
+call dsysv()
+end
+"
+LAPACK_LINKS_OK SRC_EXT F90)
+
+unset(CMAKE_REQUIRED_LIBRARIES)
+
+if (NOT LAPACK_LINKS_OK)
+ message(STATUS "  ---------------------------------------------")
+ message(STATUS "  *** LAPACK library does not link properly")
+ message(STATUS "  Please check the library linking string found or used by CMake")
+ message(STATUS "  ---------------------------------------------")
+ message(FATAL_ERROR "  *** LAPACK library does not link properly")
+endif()
+
+set(CMAKE_REQUIRED_LIBRARIES LAPACK::LAPACK)
+check_fortran_source_runs(
+"
+complex :: c
+complex, dimension(2) :: a = [ 1, 2 ]
+complex :: cdotu
+external :: cdotu
+c=cdotu(2,a(:),1,a(:),1)
+end
+"
+LAPACK_RETURN_CONVENTION_OK SRC_EXT F90)
+unset(CMAKE_REQUIRED_LIBRARIES)
+
+if (NOT LAPACK_RETURN_CONVENTION_OK)
+ message(STATUS "  ---------------------------------------------")
+ message(STATUS "  *** LAPACK library uses wrong return-value convention!!!")
+ message(STATUS "  This is likely to happen on MacOS if the default Accelerate framework is used")
+ message(STATUS "  You can install veclibfort (https://github.com/mcg1969/vecLibFort)")
+ message(STATUS "  and then set -DLAPACK_LIBRARY=-lveclibfort in your cmake invocation")
+ message(STATUS "  You can also set -DBLAS_LIBRARY=-lveclibfort, but it is not strictly needed")
+ message(STATUS "    (The key is that -lveclibfort appears first in the link stage,")
+ message(STATUS "     so the BLAS library can still point to the raw Accelerate")
+ message(STATUS "  ")
+ message(STATUS "  Alternatively you can install OpenBLAS and set the variables accordingly")
+ message(STATUS "  ---------------------------------------------")
+ message(FATAL_ERROR "  *** LAPACK library uses wrong return-value convention!!!")
+endif()
diff --git a/config/template.cmake b/config/template.cmake
new file mode 100644
index 00000000..d88e1691
--- /dev/null
+++ b/config/template.cmake
@@ -0,0 +1,8 @@
+@PACKAGE_INIT@
+
+if(NOT TARGET "@PROJECT_NAME@::@PROJECT_NAME@")
+  include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")
+
+  include(CMakeFindDependencyMacro)
+
+endif()
diff --git a/config/template.pc.in b/config/template.pc.in
new file mode 100644
index 00000000..1f9e5903
--- /dev/null
+++ b/config/template.pc.in
@@ -0,0 +1,9 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+libdir=${prefix}/@CMAKE_INSTALL_LIBDIR@
+includedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@
+
+Name: @PROJECT_NAME@
+Description: @PROJECT_DESCRIPTION@
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -l@LIBRARY_OUTPUT_NAME@
+Cflags: -I${includedir} -I${includedir}/@module-dir@
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
new file mode 100644
index 00000000..28c298ab
--- /dev/null
+++ b/examples/CMakeLists.txt
@@ -0,0 +1,33 @@
+
+set(test_dir "${CMAKE_BINARY_DIR}/install_tests")
+
+file(MAKE_DIRECTORY "${test_dir}")
+
+function(setup_test name)
+ file(COPY "${name}/"  DESTINATION "${test_dir}")
+endfunction()
+#
+setup_test("example01")
+setup_test("example02")
+setup_test("example03")
+setup_test("example04")
+
+if(WITH_MPI)
+   set(num_ranks 2)
+   set(mpiexec_args
+          ${MPIEXEC_NUMPROC_FLAG} ${num_ranks}
+          ${MPIEXEC_PREFLAGS}
+	  $<TARGET_FILE:w90_driver> 
+          ${MPIEXEC_POSTFLAGS})
+	  
+   add_test( NAME    w90-driver_mpi
+             COMMAND ${MPIEXEC_EXECUTABLE} ${mpiexec_args}
+             WORKING_DIRECTORY "${test_dir}" )
+
+ else()
+ 
+   add_test( NAME    w90-driver
+             COMMAND 	  $<TARGET_FILE:w90_driver> 
+             WORKING_DIRECTORY "${test_dir}" )
+
+endif(WITH_MPI)
diff --git a/src/comms.F90 b/src/comms.F90
index 054b7ccd..37a3f7f1 100644
--- a/src/comms.F90
+++ b/src/comms.F90
@@ -23,14 +23,14 @@ module w90_comms
 
   use w90_constants, only: dp
   use w90_io, only: io_error
+#ifdef MPI
+  use w90_mpi
+#endif
 
   implicit none
 
   private
 
-#ifdef MPI
-  include 'mpif.h'
-#endif
 
   logical, public, save :: on_root
   !! Are we the root node
@@ -129,8 +129,8 @@ contains
 #ifdef MPI
     integer :: ierr
 
-    call mpi_init(ierr)
-    if (ierr .ne. 0) call io_error('MPI initialisation error')
+!    call mpi_init(ierr)
+!    if (ierr .ne. 0) call io_error('MPI initialisation error')
 #endif
 
     call comms_setup_vars
@@ -144,8 +144,8 @@ contains
 
 #ifdef MPI
     integer :: ierr
-    call mpi_comm_rank(mpi_comm_world, my_node_id, ierr)
-    call mpi_comm_size(mpi_comm_world, num_nodes, ierr)
+    call mpi_comm_rank(mpi_comm_w90, my_node_id, ierr)
+    call mpi_comm_size(mpi_comm_w90, num_nodes, ierr)
 #else
     num_nodes = 1
     my_node_id = 0
@@ -203,7 +203,7 @@ contains
 #ifdef MPI
     integer :: ierr
 
-    call mpi_finalize(ierr)
+!    call mpi_finalize(ierr)
 #endif
 
   end subroutine comms_end
@@ -215,7 +215,7 @@ contains
 #ifdef MPI
     integer :: ierr
 
-    call mpi_barrier(mpi_comm_world, ierr)
+    call mpi_barrier(mpi_comm_w90, ierr)
 #endif
 
   end subroutine comms_barrier
@@ -227,7 +227,7 @@ contains
 !    integer :: ierr
 !
 !#ifdef MPI
-!    call MPI_abort(MPI_comm_world,1,ierr)
+!    call MPI_abort(mpi_comm_w90,1,ierr)
 !#else
 !    STOP
 !#endif
@@ -244,7 +244,7 @@ contains
 #ifdef MPI
     integer :: error
 
-    call MPI_bcast(array, size, MPI_integer, root_id, mpi_comm_world, error)
+    call MPI_bcast(array, size, MPI_integer, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_bcast_int')
@@ -265,7 +265,7 @@ contains
 #ifdef MPI
     integer :: error
 
-    call MPI_bcast(array, size, MPI_double_precision, root_id, mpi_comm_world, error)
+    call MPI_bcast(array, size, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_bcast_real')
@@ -286,7 +286,7 @@ contains
 #ifdef MPI
     integer :: error
 
-    call MPI_bcast(array, size, MPI_logical, root_id, mpi_comm_world, error)
+    call MPI_bcast(array, size, MPI_logical, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_bcast_logical')
@@ -307,7 +307,7 @@ contains
 #ifdef MPI
     integer :: error
 
-    call MPI_bcast(array, size, MPI_character, root_id, mpi_comm_world, error)
+    call MPI_bcast(array, size, MPI_character, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_bcast_char')
@@ -329,7 +329,7 @@ contains
 #ifdef MPI
     integer :: error
 
-    call MPI_bcast(array, size, MPI_double_complex, root_id, mpi_comm_world, error)
+    call MPI_bcast(array, size, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_bcast_cmplx')
@@ -355,7 +355,7 @@ contains
     integer :: error
 
     call MPI_send(array, size, MPI_logical, to, &
-                  mpi_send_tag, mpi_comm_world, error)
+                  mpi_send_tag, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_send_logical')
@@ -378,7 +378,7 @@ contains
     integer :: error
 
     call MPI_send(array, size, MPI_integer, to, &
-                  mpi_send_tag, mpi_comm_world, error)
+                  mpi_send_tag, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_send_int')
@@ -401,7 +401,7 @@ contains
     integer :: error
 
     call MPI_send(array, size, MPI_character, to, &
-                  mpi_send_tag, mpi_comm_world, error)
+                  mpi_send_tag, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_send_char')
@@ -424,7 +424,7 @@ contains
     integer :: error
 
     call MPI_send(array, size, MPI_double_precision, to, &
-                  mpi_send_tag, mpi_comm_world, error)
+                  mpi_send_tag, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_send_real')
@@ -447,7 +447,7 @@ contains
     integer :: error
 
     call MPI_send(array, size, MPI_double_complex, to, &
-                  mpi_send_tag, mpi_comm_world, error)
+                  mpi_send_tag, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_send_cmplx')
@@ -473,7 +473,7 @@ contains
     integer :: status(MPI_status_size)
 
     call MPI_recv(array, size, MPI_logical, from, &
-                  mpi_send_tag, mpi_comm_world, status, error)
+                  mpi_send_tag, mpi_comm_w90, status, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_recv_logical')
@@ -497,7 +497,7 @@ contains
     integer :: status(MPI_status_size)
 
     call MPI_recv(array, size, MPI_integer, from, &
-                  mpi_send_tag, mpi_comm_world, status, error)
+                  mpi_send_tag, mpi_comm_w90, status, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_recv_int')
@@ -521,7 +521,7 @@ contains
     integer :: status(MPI_status_size)
 
     call MPI_recv(array, size, MPI_character, from, &
-                  mpi_send_tag, mpi_comm_world, status, error)
+                  mpi_send_tag, mpi_comm_w90, status, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_recv_char')
@@ -545,7 +545,7 @@ contains
     integer :: status(MPI_status_size)
 
     call MPI_recv(array, size, MPI_double_precision, from, &
-                  mpi_send_tag, mpi_comm_world, status, error)
+                  mpi_send_tag, mpi_comm_w90, status, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_recv_real')
@@ -570,7 +570,7 @@ contains
     integer :: status(MPI_status_size)
 
     call MPI_recv(array, size, MPI_double_complex, from, &
-                  mpi_send_tag, mpi_comm_world, status, error)
+                  mpi_send_tag, mpi_comm_w90, status, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_recv_cmplx')
@@ -589,7 +589,7 @@ contains
 !#ifdef MPI
 !    integer :: error
 !
-!    call MPI_abort(MPI_comm_world,1,error)
+!    call MPI_abort(mpi_comm_w90,1,error)
 !
 !#endif
 !
@@ -618,9 +618,9 @@ contains
     select case (op)
 
     case ('SUM')
-      call MPI_reduce(array, array_red, size, MPI_integer, MPI_sum, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_integer, MPI_sum, root_id, mpi_comm_w90, error)
     case ('PRD')
-      call MPI_reduce(array, array_red, size, MPI_integer, MPI_prod, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_integer, MPI_prod, root_id, mpi_comm_w90, error)
     case default
       call io_error('Unknown operation in comms_reduce_int')
 
@@ -661,13 +661,13 @@ contains
     select case (op)
 
     case ('SUM')
-      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_sum, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_sum, root_id, mpi_comm_w90, error)
     case ('PRD')
-      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_prod, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_prod, root_id, mpi_comm_w90, error)
     case ('MIN')
-      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_MIN, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_MIN, root_id, mpi_comm_w90, error)
     case ('MAX')
-      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_max, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_precision, MPI_max, root_id, mpi_comm_w90, error)
     case default
       call io_error('Unknown operation in comms_reduce_real')
 
@@ -708,9 +708,9 @@ contains
     select case (op)
 
     case ('SUM')
-      call MPI_reduce(array, array_red, size, MPI_double_complex, MPI_sum, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_complex, MPI_sum, root_id, mpi_comm_w90, error)
     case ('PRD')
-      call MPI_reduce(array, array_red, size, MPI_double_complex, MPI_prod, root_id, mpi_comm_world, error)
+      call MPI_reduce(array, array_red, size, MPI_double_complex, MPI_prod, root_id, mpi_comm_w90, error)
     case default
       call io_error('Unknown operation in comms_reduce_cmplx')
 
@@ -751,13 +751,13 @@ contains
     select case (op)
 
     case ('SUM')
-      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_sum, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_sum, mpi_comm_w90, error)
     case ('PRD')
-      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_prod, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_prod, mpi_comm_w90, error)
     case ('MIN')
-      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_MIN, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_MIN, mpi_comm_w90, error)
     case ('MAX')
-      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_max, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_precision, MPI_max, mpi_comm_w90, error)
     case default
       call io_error('Unknown operation in comms_allreduce_real')
 
@@ -797,9 +797,9 @@ contains
     select case (op)
 
     case ('SUM')
-      call MPI_allreduce(array, array_red, size, MPI_double_complex, MPI_sum, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_complex, MPI_sum, mpi_comm_w90, error)
     case ('PRD')
-      call MPI_allreduce(array, array_red, size, MPI_double_complex, MPI_prod, mpi_comm_world, error)
+      call MPI_allreduce(array, array_red, size, MPI_double_complex, MPI_prod, mpi_comm_w90, error)
     case default
       call io_error('Unknown operation in comms_allreduce_cmplx')
 
@@ -837,7 +837,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_precision, rootglobalarray, counts, &
-                     displs, MPI_double_precision, root_id, mpi_comm_world, error)
+                     displs, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_real_1')
@@ -870,7 +870,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_precision, rootglobalarray, counts, &
-                     displs, MPI_double_precision, root_id, mpi_comm_world, error)
+                     displs, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_real_2')
@@ -903,7 +903,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_precision, rootglobalarray, counts, &
-                     displs, MPI_double_precision, root_id, mpi_comm_world, error)
+                     displs, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_real_3')
@@ -936,7 +936,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_precision, rootglobalarray, counts, &
-                     displs, MPI_double_precision, root_id, mpi_comm_world, error)
+                     displs, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_real_2_3')
@@ -970,7 +970,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_complex, rootglobalarray, counts, &
-                     displs, MPI_double_complex, root_id, mpi_comm_world, error)
+                     displs, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_cmplx_1')
@@ -998,7 +998,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_complex, rootglobalarray, counts, &
-                     displs, MPI_double_complex, root_id, mpi_comm_world, error)
+                     displs, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_cmplx_2')
@@ -1030,7 +1030,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_complex, rootglobalarray, counts, &
-                     displs, MPI_double_complex, root_id, mpi_comm_world, error)
+                     displs, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_cmplx_3')
@@ -1058,7 +1058,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_complex, rootglobalarray, counts, &
-                     displs, MPI_double_complex, root_id, mpi_comm_world, error)
+                     displs, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_cmplx_3_4')
@@ -1086,7 +1086,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_double_complex, rootglobalarray, counts, &
-                     displs, MPI_double_complex, root_id, mpi_comm_world, error)
+                     displs, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_cmplx_4')
@@ -1119,7 +1119,7 @@ contains
     integer :: error
 
     call MPI_gatherv(array, localcount, MPI_logical, rootglobalarray, counts, &
-                     displs, MPI_logical, root_id, mpi_comm_world, error)
+                     displs, MPI_logical, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_gatherv_logical')
@@ -1148,7 +1148,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_double_precision, &
-                      array, localcount, MPI_double_precision, root_id, mpi_comm_world, error)
+                      array, localcount, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_real_1')
@@ -1180,7 +1180,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_double_precision, &
-                      array, localcount, MPI_double_precision, root_id, mpi_comm_world, error)
+                      array, localcount, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_real_2')
@@ -1212,7 +1212,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_double_precision, &
-                      array, localcount, MPI_double_precision, root_id, mpi_comm_world, error)
+                      array, localcount, MPI_double_precision, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_real_3')
@@ -1244,7 +1244,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_double_complex, &
-                      array, localcount, MPI_double_complex, root_id, mpi_comm_world, error)
+                      array, localcount, MPI_double_complex, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_cmplx_4')
@@ -1276,7 +1276,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_Integer, &
-                      Array, localcount, MPI_Integer, root_id, mpi_comm_world, error)
+                      Array, localcount, MPI_Integer, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_real')
@@ -1309,7 +1309,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_Integer, &
-                      Array, localcount, MPI_Integer, root_id, mpi_comm_world, error)
+                      Array, localcount, MPI_Integer, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_int_2')
@@ -1342,7 +1342,7 @@ contains
     integer :: error
 
     call MPI_scatterv(rootglobalarray, counts, displs, MPI_Integer, &
-                      Array, localcount, MPI_Integer, root_id, mpi_comm_world, error)
+                      Array, localcount, MPI_Integer, root_id, mpi_comm_w90, error)
 
     if (error .ne. MPI_success) then
       call io_error('Error in comms_scatterv_int_3')
diff --git a/src/io.F90 b/src/io.F90
index 1a0ad527..307e42cc 100644
--- a/src/io.F90
+++ b/src/io.F90
@@ -12,18 +12,54 @@
 ! https://github.com/wannier-developers/wannier90            !
 !------------------------------------------------------------!
 
+! Small module to hold the communicator
+! for use in library mode (only...)
+! Clients should use the setter and getter routines
+!
+module w90_mpi
+
+  character(len=1) :: dummy_char
+  
+#ifdef MPI
+  include 'mpif.h'
+
+  ! By default 
+  integer, protected   :: mpi_comm_w90 = mpi_comm_world
+  !! Communicator for Wannier90 (settable)
+
+  public :: set_w90_comm, get_w90_comm
+  ! leave everything public, so that the contents of mpif.h can
+  ! be propagated
+
+CONTAINS
+
+  subroutine set_w90_comm(comm)
+    integer, intent(in) :: comm
+
+    mpi_comm_w90 = comm
+  end subroutine set_w90_comm
+
+  subroutine get_w90_comm(comm)
+    integer, intent(out) :: comm
+
+    comm = mpi_comm_w90
+  end subroutine get_w90_comm
+#endif
+end module w90_mpi
+  
 module w90_io
   !! Module to handle operations related to file input and output.
 
   use w90_constants, only: dp
+#ifdef MPI
+  use w90_mpi
+#endif
+
+
   implicit none
 
   private
 
-#ifdef MPI
-  include 'mpif.h'
-#endif
-
   integer, public, save           :: stdout
   !! Unit on which stdout is written
   character(len=50), public, save :: seedname
@@ -316,8 +352,8 @@ contains
     character(len=50) :: filename
     integer           :: stderr, ierr, whoami, num_nodes
 
-    call mpi_comm_rank(mpi_comm_world, whoami, ierr)
-    call mpi_comm_size(mpi_comm_world, num_nodes, ierr)
+    call mpi_comm_rank(mpi_comm_w90, whoami, ierr)
+    call mpi_comm_size(mpi_comm_w90, num_nodes, ierr)
     if (num_nodes > 1) then
       if (whoami > 99999) then
         write (filename, '(a,a,I0,a)') trim(seedname), '.node_', whoami, '.werr'
@@ -340,7 +376,7 @@ contains
       close (stdout)
     end if
 
-    call MPI_abort(MPI_comm_world, 1, ierr)
+    call MPI_abort(mpi_comm_w90, 1, ierr)
 
 #else
 
diff --git a/src/parameters.F90 b/src/parameters.F90
index 7f3aebb7..2aa7e3ee 100644
--- a/src/parameters.F90
+++ b/src/parameters.F90
@@ -505,6 +505,8 @@ module w90_parameters
   logical, public, save              :: automatic_translation
   integer, public, save              :: one_dim_dir
 
+  character(len=12), public :: eig_ext
+
   ! Private data
   integer                            :: num_lines
   character(len=maxlen), allocatable :: in_data(:)
@@ -513,6 +515,7 @@ module w90_parameters
   ! AAM_2016-09-15: hr_plot is a deprecated input parameter. Replaced by write_hr.
   logical                            :: hr_plot
 
+  
   public :: param_read
   public :: param_write
   public :: param_postw90_write
@@ -1628,13 +1631,13 @@ contains
     if (.not. library .and. .not. effective_model) then
 
       if (.not. postproc_setup) then
-        inquire (file=trim(seedname)//'.eig', exist=eig_found)
+        inquire (file=trim(seedname)//trim(eig_ext), exist=eig_found)
         if (.not. eig_found) then
           if (disentanglement) then
-            call io_error('No '//trim(seedname)//'.eig file found. Needed for disentanglement')
+            call io_error('No '//trim(seedname)//trim(eig_ext)//' file found. Needed for disentanglement')
           else if ((bands_plot .or. dos_plot .or. fermi_surface_plot .or. write_hr .or. boltzwann &
                     .or. geninterp)) then
-            call io_error('No '//trim(seedname)//'.eig file found. Needed for interpolation')
+            call io_error('No '//trim(seedname)//trim(eig_ext)//' file found. Needed for interpolation')
           end if
         else
           ! Allocate only here
@@ -1642,12 +1645,12 @@ contains
           if (ierr /= 0) call io_error('Error allocating eigval in param_read')
 
           eig_unit = io_file_unit()
-          open (unit=eig_unit, file=trim(seedname)//'.eig', form='formatted', status='old', err=105)
+          open (unit=eig_unit, file=trim(seedname)//trim(eig_ext), form='formatted', status='old', err=105)
           do k = 1, num_kpts
             do n = 1, num_bands
               read (eig_unit, *, err=106, end=106) i, j, eigval(n, k)
               if ((i .ne. n) .or. (j .ne. k)) then
-                write (stdout, '(a)') 'Found a mismatch in '//trim(seedname)//'.eig'
+                write (stdout, '(a)') 'Found a mismatch in '//trim(seedname)//trim(eig_ext)
                 write (stdout, '(a,i0,a,i0)') 'Wanted band  : ', n, ' found band  : ', i
                 write (stdout, '(a,i0,a,i0)') 'Wanted kpoint: ', k, ' found kpoint: ', j
                 write (stdout, '(a)') ' '
@@ -1656,7 +1659,7 @@ contains
                 write (stdout, '(a)') 'If your pseudopotentials have shallow core states remember'
                 write (stdout, '(a)') 'to account for these electrons.'
                 write (stdout, '(a)') ' '
-                call io_error('param_read: mismatch in '//trim(seedname)//'.eig')
+                call io_error('param_read: mismatch in '//trim(seedname)//trim(eig_ext))
               end if
             enddo
           end do
@@ -2368,8 +2371,8 @@ contains
 
     return
 
-105 call io_error('Error: Problem opening eigenvalue file '//trim(seedname)//'.eig')
-106 call io_error('Error: Problem reading eigenvalue file '//trim(seedname)//'.eig')
+105 call io_error('Error: Problem opening eigenvalue file '//trim(seedname)//trim(eig_ext))
+106 call io_error('Error: Problem reading eigenvalue file '//trim(seedname)//trim(eig_ext))
 
   end subroutine param_read
 
@@ -6352,6 +6355,12 @@ contains
     ! allocatable, and in param_read they were allocated on the root node only
     !
     if (.not. on_root) then
+      if( allocated(fermi_energy_list) )    deallocate(fermi_energy_list)
+      if( allocated(kubo_freq_list) )       deallocate(kubo_freq_list)
+      if( allocated(dos_project) )          deallocate(dos_project)
+      if( allocated(gyrotropic_band_list) ) deallocate(gyrotropic_band_list)
+      if( allocated(gyrotropic_freq_list) ) deallocate(gyrotropic_freq_list)
+
       allocate (fermi_energy_list(nfermi), stat=ierr)
       if (ierr /= 0) call io_error( &
         'Error allocating fermi_energy_read in postw90_param_dist')
diff --git a/src/wannier90_m.F90 b/src/wannier90_m.F90
new file mode 100644
index 00000000..844ca757
--- /dev/null
+++ b/src/wannier90_m.F90
@@ -0,0 +1,5 @@
+module wannier90_m
+
+  use wannier90_wrapper_m, only: wannier90_wrapper
+
+end module wannier90_m
diff --git a/src/wannier_prog.F90 b/src/wannier_prog.F90
index 71dc710a..96d8ae82 100644
--- a/src/wannier_prog.F90
+++ b/src/wannier_prog.F90
@@ -49,12 +49,30 @@
 ! https://github.com/wannier-developers/wannier90            !
 !------------------------------------------------------------!
 
-program wannier
-  !! The main Wannier90 program
+module wannier90_wrapper_m
+
+  public :: wannier90_wrapper
+  private
+  
+CONTAINS
+  
+  subroutine wannier90_wrapper(seedname_in,                           &
+#ifdef MPI
+                            mpi_comm,                              &
+#endif
+                            nnkp_mode, dryrun_mode,                &
+                            eigfile_ext,                           &
+                            nntot_out, nnlist_out, nncell_out,     &
+                            u_matrix_out, u_matrix_opt_out)
+  
+  !! The main Wannier90 program, wrapped as a subroutine
 
   use w90_constants
   use w90_parameters
   use w90_io
+#ifdef MPI
+  use w90_mpi, only: set_w90_comm
+#endif
   use w90_hamiltonian
   use w90_kmesh
   use w90_disentangle
@@ -64,15 +82,40 @@ program wannier
   use w90_transport
   use w90_comms, only: on_root, num_nodes, comms_setup, comms_end, comms_bcast, my_node_id
   use w90_sitesym !YN:
+  use w90_ws_distance, only: clean_ws_translate
 
   implicit none
 
+  character(len=*), intent(in)   :: seedname_in
+#ifdef MPI
+  integer, intent(in) :: mpi_comm
+#endif
+
+  logical, intent(in), optional  :: nnkp_mode
+  logical, intent(in), optional  :: dryrun_mode
+  character(len=*), intent(in), optional :: eigfile_ext
+
+  ! Information on k-point neighbors that clients can request
+  integer, intent(out), optional :: nntot_out
+  integer, intent(out), allocatable, optional :: nnlist_out(:,:)
+  integer, intent(out), allocatable, optional :: nncell_out(:,:,:)
+
+  ! Information on unitary matrices that clients can request
+  complex(dp), intent(out), allocatable, optional :: u_matrix_out(:,:,:)
+  complex(dp), intent(out), allocatable, optional :: u_matrix_opt_out(:,:,:)
+
+  
   real(kind=dp) time0, time1, time2
   character(len=9) :: stat, pos, cdate, ctime
   logical :: wout_found, dryrun
   integer :: len_seedname
   character(len=50) :: prog
 
+#ifdef MPI
+  ! Set internal communicator to client-specified one
+  call set_w90_comm(mpi_comm)
+#endif
+
   call comms_setup
 
   library = .false.
@@ -80,10 +123,32 @@ program wannier
   time0 = io_time()
 
   if (on_root) then
-    prog = 'wannier90'
-    call io_commandline(prog, dryrun)
+    prog = 'wannier90-newlib'
+    !    call io_commandline(prog, dryrun)
+
+    seedname = seedname_in
+
+    if (present(nnkp_mode)) then
+       post_proc_flag = nnkp_mode
+    else
+       post_proc_flag = .false.
+    endif
+
+    if (present(dryrun_mode)) then
+       dryrun = dryrun_mode
+    else
+       dryrun = .false.
+    endif
+
+    if (present(eigfile_ext)) then
+       eig_ext = eigfile_ext
+    else
+       eig_ext = ".eig"
+    endif
+
     len_seedname = len(seedname)
   end if
+ 
   call comms_bcast(len_seedname, 1)
   call comms_bcast(seedname, len_seedname)
   call comms_bcast(dryrun, 1)
@@ -144,7 +209,10 @@ program wannier
       write (stdout, *) '                       No problems found with win file'
       write (stdout, *) '                       ==============================='
     endif
-    stop
+    call kmesh_dealloc()
+    call param_dealloc()
+    close(unit=stdout)
+    return
   endif
 
   ! We now distribute the parameters to the other nodes
@@ -191,12 +259,32 @@ program wannier
 
   if (postproc_setup) then
     if (on_root) call kmesh_write()
+    !
+    !
+    if (present(nntot_out)) then
+       nntot_out = nntot
+    endif
+    if (present(nnlist_out)) then
+       if (allocated(nnlist_out)) deallocate(nnlist_out)
+       allocate(nnlist_out,source=nnlist)
+    endif
+    if (present(nncell_out)) then
+       if (allocated(nncell_out)) deallocate(nncell_out)
+       allocate(nncell_out,source=nncell)
+    endif
+    !
+    !  sanity check
+    !
+    if (present(u_matrix_out) .or. present(u_matrix_opt_out)) then
+       call io_error('Error: Cannot request u_matrices in nnkp mode')
+    endif
+    !
     call kmesh_dealloc()
     call param_dealloc()
     if (on_root) write (stdout, '(1x,a25,f11.3,a)') 'Time to write kmesh      ', io_time(), ' (sec)'
     if (on_root) write (stdout, '(/a)') ' Exiting... '//trim(seedname)//'.nnkp written.'
     call comms_end
-    stop
+    return
   endif
 
   if (lsitesymmetry) call sitesym_read()   ! update this to read on root and bcast - JRY
@@ -254,10 +342,22 @@ program wannier
     end if
   endif
 
+  ! Transfer info on unitary matrices if requested
+  if (present(u_matrix_out)) then
+     if (allocated(u_matrix_out)) deallocate(u_matrix_out)
+     allocate(u_matrix_out,source=u_matrix)
+  endif
+  if (disentanglement) then
+     if (present(u_matrix_opt_out)) then
+        if (allocated(u_matrix_opt_out)) deallocate(u_matrix_opt_out)
+        allocate(u_matrix_opt_out,source=u_matrix_opt)
+     endif
+  endif
   call tran_dealloc()
   call hamiltonian_dealloc()
   call overlap_dealloc()
   call kmesh_dealloc()
+  call clean_ws_translate()
   call param_dealloc()
   if (lsitesymmetry) call sitesym_dealloc() !YN:
 
@@ -276,5 +376,6 @@ program wannier
 
   call comms_end
 
-end program wannier
+end subroutine wannier90_wrapper
 
+end module wannier90_wrapper_m
diff --git a/src/wannierise.F90 b/src/wannierise.F90
index c21b2b8b..2ba21fd3 100644
--- a/src/wannierise.F90
+++ b/src/wannierise.F90
@@ -52,10 +52,6 @@ module w90_wannierise
   !! we only need to do this on entering wann_main (_gamma)
   real(kind=dp) :: lambda_loc
 
-#ifdef MPI
-  include 'mpif.h'
-#endif
-
   type localisation_vars
     !! Contributions to the spread
     real(kind=dp) :: om_i
diff --git a/w90_driver.F90 b/w90_driver.F90
new file mode 100644
index 00000000..e10cb8af
--- /dev/null
+++ b/w90_driver.F90
@@ -0,0 +1,72 @@
+program w90_driver
+  use wannier90_m, only: wannier90_wrapper
+#ifdef MPI
+  use mpi
+#endif
+  
+  integer, parameter :: dp = selected_real_kind(10)
+  
+  integer :: nntot
+  integer,  allocatable :: nncell(:,:,:), nnlist(:,:)
+
+#ifdef MPI
+  integer MPI_err
+  call MPI_init(MPI_err)
+#endif
+  
+     call wannier90_wrapper("gaas",  &
+#ifdef MPI
+                       mpi_comm=mpi_comm_world, &
+#endif
+                       dryrun_mode=.true.)
+     print *, "Done gaas dryrun"
+     
+#ifdef MPI
+     call wannier90_wrapper("gaas", mpi_comm=mpi_comm_world)
+#else
+     call wannier90_wrapper("gaas")
+#endif
+                        
+     print *, "Done gaas"
+
+#ifdef MPI
+     call wannier90_wrapper("silicon", mpi_comm=mpi_comm_world)
+#else
+     call wannier90_wrapper("silicon")
+#endif
+                        
+     print *, "Done silicon"
+
+     call wannier90_wrapper("lead",  &
+#ifdef MPI
+                       mpi_comm=mpi_comm_world, &
+#endif
+                       nnkp_mode=.true., &               
+                       nntot_out=nntot, &
+                       nnlist_out=nnlist, &
+                       nncell_out=nncell)
+     print *, "Done lead preprocessing"
+     print *, "nntot: ", nntot
+     print *, "shape nnlist: ", shape(nnlist)
+     print *, "shape nncell: ", shape(nncell)
+
+#ifdef MPI
+     call wannier90_wrapper("gaas", mpi_comm=mpi_comm_world)
+#else
+     call wannier90_wrapper("gaas")
+#endif
+
+     print *, "Done gaas again"
+
+#ifdef MPI
+     call wannier90_wrapper("copper", mpi_comm=mpi_comm_world)
+#else
+     call wannier90_wrapper("copper")
+#endif
+     print *, "Done copper"
+     
+#ifdef MPI
+  call MPI_finalize(MPI_err)
+#endif
+  
+end program w90_driver
