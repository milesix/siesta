<?xml version="1.0"?><!--*- mode: nxml; indent-tabs-mode: nil -*-->
<!DOCTYPE moduleset SYSTEM "moduleset.dtd">
<?xml-stylesheet type="text/xsl" href="moduleset.xsl"?>
<!-- vim:set ts=2 expandtab: -->
<moduleset>

  <!-- Official repositories, not used by default, using provided tars instead. -->
  <repository type="tarball" name="libyaml" href="http://pyyaml.org/download/libyaml/"/>
  <repository type="svn" name="libxc" href="http://www.tddft.org/svn/"/>
  <repository type="bzr" name="bigdft" href="lp:/"/>
  <repository type="tarball" name="wannier"
              href="http://www.wannier.org/code/"/>
  <repository type="tarball" name="unidata"
              href="ftp://ftp.unidata.ucar.edu/pub/"/>
  <repository type="tarball" name="etsf" href="http://www.etsf.eu/system/files/"/>

  <repository type="tarball" name="simgrid" href="https://framagit.org/simgrid/simgrid/uploads/b086147968e111e7b7d7e27e8c4b11c5/"/>
  <repository type="git" name="simgrid-dev" href="https://framagit.org/"/>
  <repository type="tarball" name="ntpoly" href="https://github.com/william-dawson/NTPoly/archive/"/>
  <repository type="tarball" name="bigpoly" href="https://github.com/william-dawson/BigPoly/archive/"/>
  <repository type="tarball" name="eigen3" href="http://bitbucket.org/eigen/eigen/get/"/>
  <repository type="git" name="pyyaml" href="https://github.com/dcaliste/"/>
  <repository type="git" name="sphinx" href="https://github.com/rowanG077/"/>
  <repository type="git" name="esl" href="https://gitlab.e-cam2020.eu/esl/"/>
  <repository type="tarball" name="spglib" href="https://github.com/atztogo/spglib/archive/"/>

  <repository type="git" name="L_Sim" href="https://gitlab.com/l_sim/"/>

  <repository type="tarball" name="metis"
              href="http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/"/>
  <repository type="tarball" name="cmake-rep"
              href="https://cmake.org/files/v3.3/"/>
  <repository type="tarball" name="netlib"
              href="http://www.netlib.org/lapack/"/>

  <repository type="tarball" name="local" href="./"/>
  <repository type="tarball" name="local-optional" href="./"/>

  <include href="gnome.modules"/>

  <autotools id="libxc" check-target="false" autogen-sh="autoreconf">
    <!--<branch repo="libxc" checkoutdir="libxc-2.0.x"/>-->
    <branch repo="local" module="libxc-2.2.2.tar.gz" version="2.2.2" checkoutdir="libxc">
            <!-- <patch file="libxc-2.0.x.patch" />-->
    </branch>
  </autotools>

  <autotools id="v_sim-dev" autogen-sh="autogen.sh+configure">
    <!-- <branch repo="local-optional" module="v_sim-dev.tar.bz2" -->
    <branch repo="L_Sim" module="v_sim"
            version="3.99" checkoutdir="v_sim-dev">
      <patch file="v_sim-dev.patch" />
    </branch>
    <dependencies>
      <dep package="PyYAML"/>
      <dep package="openbabel"/>
      <dep package="intltool"/>
      <dep package="libglu1-mesa-dev"/>
      <if condition-set="python">
        <dep package="pygobject"/>
        <dep package="gobject-introspection"/>
      </if>
    </dependencies>
  </autotools>

  <cmake id="ntpoly" use-ninja="no">
    <branch repo="ntpoly" module="ntpoly-v2.3.tar.gz" version="2.3" checkoutdir="ntpoly"/>
    <cmakeargs value="-DFORTRAN_ONLY=Yes"/>
  </cmake>
  <cmake id="bigpoly" use-ninja="no">
    <branch repo="bigpoly" module="bigpoly-0.6.0.tar.gz" version="0.6.0" checkoutdir="bigpoly"/>
  </cmake>

  <distutils id="sphinx-fortran">
    <branch repo="L_Sim" module="sphinx-fortran" revision="lsim" />
  </distutils>

  <distutils id="sphinx-multibuild">
    <branch repo="sphinx" module="sphinx-multibuild" revision="1.2.0" />
    <dependencies>
      <dep package="sphinx-fortran"/>
    </dependencies>
  </distutils>

  <autotools id="libyaml" autogen-sh="autoreconf">
    <!--<branch repo="libyaml" module="yaml-0.1.4.tar.gz" version="0.1.4"/>-->
    <branch repo="local" module="yaml-0.1.6.tar.gz" version="0.1.6" checkoutdir="yaml" >
      <patch file="yaml-doxygen.patch" />
      <patch file="yaml-doxygen-in.patch" />
    </branch>
  </autotools>

  <cmake id="openbabel" use-ninja="no">
    <branch repo="local-optional" module="openbabel-2.4.1.tar.gz" version="2.4.1" checkoutdir="openbabel"/>
    <cmakeargs value="-DPYTHON_BINDINGS=Yes"/>
    <dependencies>
      <dep package="eigen3"/>
    </dependencies>
  </cmake>
  
  <cmake id="eigen3" use-ninja="no">
    <branch repo="eigen3" module="3.3.7.tar.bz2" version="3.3.7" checkoutdir="eigen3"/>
  </cmake>

  <cmake id="lapack" use-ninja="no">
    <branch repo="netlib" module="lapack-3.7.0.tgz" version="3.7.0" checkoutdir="lapack"/>
  </cmake>

  <autotools id="pspio" autogen-sh="autogen.sh+configure" autogenargs="--enable-fortran">
    <!--<branch repo="esl" module="pspio" version="0.2.0"/>-->
    <branch repo="esl" module="pspio" revision="recpot"/>
  </autotools>

  <distutils id="PyYAML">
    <!--<branch repo="libyaml" module="PyYAML-3.10.tar.gz" version="3.10"/>-->
    <!--<branch repo="local" module="PyYAML-3.11.tar.gz" version="3.11" checkoutdir="PyYAML"/>-->
    <branch repo="local" module="PyYAML-5.1.2.tar.gz" version="5.1.2" checkoutdir="PyYAML"/>
    <!--<branch repo="pyyaml"  module="pyyaml" checkoutdir="PyYAML"/>-->
    <dependencies>
      <dep package="libyaml"/>
      <!--<dep package="cython"/>-->
    </dependencies>
  </distutils>

  <autotools id="libABINIT" check-target="false" autogen-sh="autoreconf">
    <branch repo="local" module="libABINIT-6.8+12.tar.gz" version="6.8+12" checkoutdir="libABINIT">
      <!-- <patch file="libABINIT.patch" /> -->
    </branch>
    <dependencies>
      <dep package="futile"/>
      <if condition-unset="no_upstream">
         <dep package="libxc"/>
      </if>
    </dependencies>
  </autotools>

  <autotools id="GaIn">
    <branch repo="local" module="GaIn-1.0.tar.gz"
            version="1.0"/>
  </autotools>

  <autotools id="futile" autogen-sh="autoreconf">
    <branch repo="local" module="futile-1.8.tar.gz" version="1.8.0" checkoutdir="futile"/>
    <dependencies>
      <if condition-unset="no_upstream">
         <dep package="libyaml"/>
      </if>
      <if condition-set="testing">
        <dep package="PyYAML"/>
      </if>
      <if condition-set="python">
        <dep package="pygobject"/>
        <dep package="gobject-introspection"/>
      </if>
      <if condition-set="simulation">
        <dep package="simgrid-dev"/>
      </if>
      <if condition-set="devdoc">
        <dep package="sphinx-fortran"/>
      </if>
    </dependencies>
  </autotools>

  <autotools id="psolver" autogen-sh="autoreconf">
    <branch repo="local" module="psolver-1.8.tar.gz" version="1.8.0" checkoutdir="psolver"/>
    <dependencies>
      <dep package="futile"/>
      <dep package="atlab"/>
    </dependencies>
  </autotools>

  <autotools id="atlab" autogen-sh="autoreconf">
    <branch repo="local" module="atlab-1.0.tar.gz" version="1.0.0" checkoutdir="atlab"/>
    <dependencies>
      <dep package="futile"/>
      <if condition-set="babel">
        <dep package="openbabel"/>
      </if>
    </dependencies>
  </autotools>

  <autotools id="chess" autogen-sh="autoreconf">
    <branch repo="local" module="CheSS-0.2.4.tar.gz" version="0.2.4" checkoutdir="chess"/>
    <dependencies>
      <dep package="futile"/>
      <dep package="atlab"/>
      <if condition-set="ntpoly">
        <dep package="ntpoly"/>
      </if>
    </dependencies>
  </autotools>

  <autotools id="bigdft" autogen-sh="autoreconf">
    <!--<branch repo="bigdft" module="bigdft" version="1.7.5"/>-->
    <branch repo="local" module="bigdft-1.9.0.tar.gz" version="1.9.0" checkoutdir="bigdft"/>
    <dependencies>
      <dep package="futile"/>
      <dep package="atlab"/>
      <dep package="chess"/>
      <if condition-unset="no_upstream">
         <dep package="libxc"/>
         <dep package="GaIn"/>
      </if>
      <dep package="psolver"/>
      <dep package="libABINIT"/>
      <if condition-set="testing">
        <dep package="PyBigDFT"/>
      </if>
      <if condition-set="vsim">
        <dep package="v_sim-dev"/>
      </if>
    </dependencies>
  </autotools>

  <autotools id="spred" autogen-sh="autoreconf">
    <branch repo="local" module="spred-1.8.tar.gz" version="1.8.0" checkoutdir="spred"/>
    <dependencies>
      <dep package="futile"/>
      <dep package="psolver"/>
      <dep package="bigdft"/>
    </dependencies>
  </autotools>

  <autotools id="pseudo" autogen-sh="autoreconf">
    <!--<branch repo="bigdft" module="pseudo" version="1.7.5"/>-->
    <branch repo="local" module="pseudo-1.7.5.tar.gz" version="1.7.5" checkoutdir="pseudo"/>
    <dependencies>
      <dep package="libxc"/>
    </dependencies>
  </autotools>

  <makesys id="wannier90">
    <branch repo="wannier" module="wannier90-2.0.0.tar.gz" version="2.0.0">
      <patch file="wannier90-2.0.0.patch" />
    </branch>
  </makesys>

  <autotools id="netcdf" autogenargs="--disable-netcdf-4">
    <branch repo="unidata" module="netcdf/netcdf-4.3.3.tar.gz"
            version="4.3.3"/>
  </autotools>

  <autotools id="netcdff">
    <branch repo="unidata" module="netcdf/netcdf-fortran-4.4.1.tar.gz"
            version="4.4.1"/>
    <dependencies>
      <dep package="netcdf"/>
    </dependencies>
  </autotools>

  <autotools id="etsf_io">
    <branch repo="etsf" module="etsf_io-1.0.4.tar.gz"
            version="1.0.4"/>
    <dependencies>
      <dep package="netcdff"/>
    </dependencies>
  </autotools>

  <cmake id="simgrid" use-ninja="no">
    <branch repo="simgrid" module="SimGrid-3.22.tar.gz"
            version="3.22"/>
  </cmake>

  <cmake id="simgrid-dev" use-ninja="no">
    <branch repo="simgrid-dev"  module="simgrid/simgrid"
            checkoutdir="simgrid-dev"/>
  </cmake>

  <distutils id="spglib">
    <branch repo="spglib" module="v1.12.2.tar.gz" version="1.12.2" checkoutdir="spglib">
      <patch file="spglib.patch" strip="1" />
    </branch>
  </distutils>

  <distutils id="PyBigDFT">
    <branch repo="local" module="PyBigDFT-0.1.tar.gz" version="0.1" checkoutdir="PyBigDFT"/>
    <dependencies>
      <if condition-set="ntpoly">
        <dep package="ntpoly"/>
        <dep package="bigpoly"/>
      </if>
      <dep package="PyYAML"/>
    </dependencies>
  </distutils>

  <makesys id="parmetis">
    <branch repo="metis" module="parmetis-4.0.2.tar.gz"
            version="4.0.2"/>
<!--    <dependencies>
      <dep package="cmake-dev"/>
    </dependencies> -->
  </makesys>

  <metamodule id="upstream-suite">
    <dependencies>
      <dep package="v_sim-dev"/>
      <dep package="openbabel"/>
      <dep package="libxc"/>
      <dep package="PyYAML"/>
    </dependencies>
  </metamodule>

  <systemmodule id="intltool">
    <branch repo="system"/>
    <systemdependencies>
      <dep type="path" name="intltool-extract"/>
    </systemdependencies>
  </systemmodule>

  <systemmodule id="libglu1-mesa-dev">
    <branch repo="system"/>
    <systemdependencies>
      <dep type="c_include" name="GL/gl.h"/>
    </systemdependencies>
  </systemmodule>



  <metamodule id="bigdft-suite">
    <dependencies>
      <dep package="bigdft"/>
      <dep package="PyBigDFT"/>
      <dep package="PyYAML"/>
    </dependencies>
  </metamodule>

  <metamodule id="spred-suite">
    <dependencies>
      <dep package="spred"/>
      <dep package="bigdft-suite"/>
    </dependencies>
  </metamodule>

  <metamodule id="chess-suite">
    <dependencies>
      <dep package="chess"/>
    </dependencies>
  </metamodule>

  <repository type="system" name="system"/>

  <systemmodule id="cython">
    <branch repo="system"/>
    <systemdependencies>
      <dep type="path" name="cython"/>
    </systemdependencies>
  </systemmodule>


</moduleset>
