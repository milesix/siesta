
add_library(
  # Library name
  mpi_siesta
  mpi_siesta.F90
  mpi_interfaces.F
  mpi__include.f90
  Interfaces.f90
  timer_mpi.F90
  )

# This build requires include directories for the present directory
set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(WITH_MPI)
  # Add stuff for MPI
  # This enables correct compilation and also correct flags for
  # MPI builds.
  # Also, it ensures that the include directories are correctly setup
  target_compile_options(mpi_siesta PUBLIC ${MPI_Fortran_COMPILE_FLAGS})
  target_include_directories(mpi_siesta PUBLIC ${MPI_Fortran_INCLUDE_DIRS})
  target_link_directories(mpi_siesta PUBLIC ${MPI_Fortran_LIBRARY_DIRS})
  target_link_libraries(mpi_siesta PUBLIC ${MPI_Fortran_LIBRARIES})

  # For stuff that depends on SIESTA_MPI, add these include directories
  # This ensures that the module files generated for this library are
  # importable
  # Probably this is not the best way since one could imagine the same module
  # name in several different sub-directories
  target_include_directories(mpi_siesta INTERFACE ${CMAKE_CURRENT_BINARY_DIR})

else()
  message(ERROR_FATAL "MPI is not enabled, cannot build MPI-siesta")
endif()


# Add generation script
# Create the int and kind explorer targets
add_executable(mpi_int_explorer
  # Do not default to build this one, it is only
  # a temporary build dependency
  EXCLUDE_FROM_ALL
  int_explorer.f90
  )

add_executable(mpi_kind_explorer
  # Do not default to build this one, it is only
  # a temporary build dependency
  EXCLUDE_FROM_ALL
  kind_explorer.f90
  )


# Ensure that SIESTA_MPI depends on the automatically generated
add_custom_command(
  # These are output files generated by the generate.sh script
  OUTPUT Interfaces.f90 VS.uses V_S.uses
  # Dependency targets
  DEPENDS mpi_int_explorer mpi_kind_explorer
  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/generate.sh
  VERBATIM
  COMMENT "Creating MPI interfaces and modules"
  )

